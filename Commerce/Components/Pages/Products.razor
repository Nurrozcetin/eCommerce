@page "/product"
@inject HttpClient Http
@using System.Text.Json

<PageTitle>Ürünler</PageTitle>

@if (products == null)
{
    <p class="text-center">Loading...</p>
}
else if (products.Count == 0)
{
    <p class="text-center">Ürün bulunamadı.</p>
}
else
{
    //ürünlere dair niteliklerin gösterileceği card yapısını ve nereden verilerin geleceği ayarlanır.
    <div class="product-container">
        @foreach (var product in products)
        {
            <div class="product-card">
                <div class="wishlist-icon">
                    <i class="fas fa-heart"></i>
                </div>
                <img src="@product.ProductImage" class="product-image" alt="@product.ProductName"> 
                <div class="product-details">
                    <h5>@product.ProductName</h5>
                    <p class="price">$@product.Price.ToString("F2")</p>

                    <div class="rating">
                        @for (int i = 1; i <= 5; i++)
                        {
                            <span class="star">
                                @(i <= Math.Round(product.AverageRating) ? "⭐" : "☆")
                            </span>
                        }
                        <span class="reviews">(@product.RatingsCount Değerlendirme)</span>
                    </div>

                    <button class="add-to-cart" @onclick="() => AddProductToCart(product)">Sepete Ekle</button>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Product> products = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //apiden dönen yanıtın json formatında döndürülmesini sağlar.
            var json = await Http.GetStringAsync("https://localhost:7232/api/product");
            using var doc = JsonDocument.Parse(json);
            var root = doc.RootElement;
            var values = root.GetProperty("$values").EnumerateArray();

            //her bir verinin string veya integer formatında döndürülmesini sağlar.
            products = values.Select(v => new Product
                {
                    ProductID = v.GetProperty("productID").GetInt32(),
                    ProductName = v.GetProperty("productName").GetString() ?? "Bilinmeyen",
                    ProductImage = v.GetProperty("productImage").GetString() ?? "",
                    Price = v.GetProperty("price").GetDecimal(),
                    Stock = v.GetProperty("stock").GetInt32(),
                    CreatedAt = v.GetProperty("createdAt").GetDateTime(),
                    SellerName = v.GetProperty("sellerName").GetString(),
                    AverageRating = v.GetProperty("averageRating").GetDouble(),
                    RatingsCount = v.GetProperty("ratingsCount").GetInt32()
                }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Hata oluştu: " + ex.Message);
        }
    }

    //secili urunu sepete eklemek icin fonksiyon
    private async Task AddProductToCart(Product product)
    {
        var addCartRequest = new AddCartRequest
            {
                ProductId = product.ProductID,
                Quantity = 1 //default olarak bir tane adet eklenir
            };

        try
        {
            //ilgili apiye istek atilir
            var response = await Http.PostAsJsonAsync("https://localhost:7232/api/cart/addCart", addCartRequest);

            if (response.IsSuccessStatusCode)
            {
                //sonuc json olarak donulur
                var result = await response.Content.ReadFromJsonAsync<object>();
                Console.WriteLine(result?.ToString());
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<object>();
                Console.WriteLine("Hata: " + error?.ToString());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Hata oluştu: " + ex.Message);
        }
    }

    //sepete ekleme icin atilan istek nesnesi
    public class AddCartRequest
    {
        public int ProductId { get; set; }
        public int Quantity { get; set; }
    }

    //product nesnesi modele uygun olacak şekilde yazılır. 
    public class Product
    {
        public int ProductID { get; set; }
        public string ProductName { get; set; } = string.Empty;
        public string ProductImage { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Stock { get; set; }
        public DateTime CreatedAt { get; set; }
        public string? SellerName { get; set; }
        public double AverageRating { get; set; } 
        public int RatingsCount { get; set; }
    }
}
